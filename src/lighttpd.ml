open Printf
open ExtString

let (//) = Filename.concat

let generate_conf port fcgi args = __SONG__try "generate_conf" (
  let status = Unix.stat fcgi in
  let () = match status.Unix.st_kind with
    | Unix.S_REG -> (*  printf "%s is a regular file\n" fcgi ; *) ()
    | _ -> __SONG__failwith ( fcgi ^ " is not a regular file")
  in
  let fout = open_out "lighttpd.conf" in
    fprintf fout "
debug.log-request-handling = \"enable\"
debug.log-request-header = \"enable\"
debug.log-response-header = \"enable\"
debug.log-condition-handling = \"enable\"
server.document-root         = env.SONG_ROOT + \"/web\"

## 64 Mbyte ... nice limit
server.max-request-size = 65000

## bind to port (default: 80)
#server.port                 = 2048
server.port                 = %d

## bind to localhost (default: all interfaces)
#server.bind                = \"localhost\"
server.errorlog            = env.PWD + \"/tmp/lighttpd.error.log\"
server.breakagelog         = env.PWD + \"/tmp/lighttpd.breakage.log\"
server.name                = env.HOSTNAME
server.tag                 = \"Lighttpd, conf generated by SONG\"

server.dir-listing          = \"enable\"

#server.event-handler        = \"linux-sysepoll\"
#server.event-handler        = \"linux-rtsig\"

#server.modules.path         = \"\"
server.modules              = (
#				\"mod_rewrite\",
				\"mod_setenv\",
#				\"mod_secdownload\",
#			        \"mod_access\",
#				\"mod_auth\",
#				\"mod_httptls\",
#				\"mod_status\",
#				\"mod_expire\",
#				\"mod_simple_vhost\",
#				\"mod_redirect\",
#				\"mod_evhost\",
#				\"mod_localizer\",
				\"mod_fastcgi\",
				\"mod_cgi\",
				\"mod_alias\",
#                               \"mod_dirlisting\",
#				\"mod_compress\",
#				\"mod_userdir\",
#				\"mod_ssi\",
#				\"mod_accesslog\" 
)

server.indexfiles           = ( \"index.php\", \"index.html\",
                                \"index.htm\", \"default.htm\" )

dir-listing.activate = \"enable\" 
######################## MODULE CONFIG ############################

#ssi.extension = ( \".shtml\" )

accesslog.filename          = env.PWD + \"/tmp/lighttpd.access.log\"

mimetype.assign             = ( \".png\"  => \"image/png\",
                                \".jpg\"  => \"image/jpeg\",
                                \".jpeg\" => \"image/jpeg\",
                                \".gif\"  => \"image/gif\",
                                \".html\" => \"text/html\",
                                \".htm\"  => \"text/html\",
                                \".pdf\"  => \"application/pdf\",
                                \".swf\"  => \"application/x-shockwave-flash\",
                                \".spl\"  => \"application/futuresplash\",
                                \".txt\"  => \"text/plain\",
                                \".tar.gz\" =>   \"application/x-tgz\",
                                \".tgz\"  => \"application/x-tgz\",
                                \".gz\"   => \"application/x-gzip\",
				\".c\"    => \"text/plain\",
				\".cpp\"    => \"text/plain\",
				\".h\"    => \"text/plain\",
				\".conf\" => \"text/plain\",
				\".log\" => \"text/plain\", 
				\".json\" => \"text/json\",
				\".yaml\" => \"text/plain\",
				\".js\" => \"application/x-javascript\", 
				\".css\" => \"text/css\" 
)

fastcgi.map-extensions = (
        \".asmx\"   => \".aspx\",
        \".ashx\"   => \".aspx\",
        \".asax\"   => \".aspx\",
        \".ascx\"   => \".aspx\",
        \".soap\"   => \".aspx\",
        \".rem\"    => \".aspx\",
        \".axd\"    => \".aspx\",
        \".cs\"     => \".aspx\",
        \".config\" => \".aspx\",
        \".dll\"    => \".aspx\"
)

fastcgi.debug               = 1


fastcgi.server              = (    
\".songx\" => ((
   \"socket\" =>  env.PWD  + \"/tmp/cif-pamplemousse\",
   \"bin-path\" => \"%s\",
#   \"bin-copy-environment\" => ( \"PATH\", \"SHELL\", \"USER\" ,\"LD_LIBRARY_PATH\",\"LOGNAME\" ),
   \"max-procs\" => 1,
   \"check-local\" => \"disable\"
  ))
)


cgi.assign                  = ( \".pl\"  => \"/usr/bin/perl\",
                                \".cgi\" => \"/usr/bin/perl\",
				\".py\"  => \"/usr/bin/python\"
 )


ssl.engine                  = \"disable\"
#### status module
#status.status-url           = \"/server-status\"
#status.config-url           = \"/server-config\"

" port  fcgi ;


    close_out fout
)

let run cif_root port fcgi args = __SONG__try "run" (
  let fcgi = if Filename.is_relative fcgi then (Sys.getcwd()) // fcgi else fcgi in
  generate_conf port fcgi args ;
  let _ = Util.mkdir "tmp"  in
  let command = sprintf "%s/lighttpd/sbin/lighttpd -D -f lighttpd.conf" cif_root in
  let pe () = eprintf "logs are in $PWD/tmp, if web server doesn't work look at lighttpd.breakage.log and lighttpd.error.log\nand don't forget to stop any already running instance of your fcgi and lighttpd\n" in
    __SONG__try command (
      let status = Unix.system command in
	(match status with
	  | Unix.WEXITED 0 -> () 
	  | Unix.WEXITED i -> pe () ; __SONG__failwith ("exit with code " ^ (string_of_int i))
	  | Unix.WSIGNALED i -> pe () ; __SONG__failwith ("signaled with code " ^ (string_of_int i))
	  | Unix.WSTOPPED i -> pe () ; __SONG__failwith ("stopped with code " ^ (string_of_int i))
	) ;
	()
    ) ;
      
)
